plugins {
    id 'java'
    id 'edu.wpi.first.WpilibTools' version '1.3.0'
    id 'com.google.protobuf' version '0.9.3'
}

ext {
    nativeName = "photontargeting"
}

apply from: "${rootDir}/shared/setupBuild.gradle"


wpilibTools.deps.wpilibVersion = wpi.versions.wpilibVersion.get()

def nativeConfigName = 'wpilibNatives'
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
}

nativeTasks.addToSourceSetResources(sourceSets.main)

nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpimath")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpinet")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpiutil")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("ntcore")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("cscore")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("apriltag")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("hal")
nativeConfig.dependencies.add wpilibTools.deps.wpilibOpenCv("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get())

dependencies {
    implementation wpilibTools.deps.wpilibJava("wpiutil")
    implementation wpilibTools.deps.wpilibJava("cameraserver")
    implementation wpilibTools.deps.wpilibJava("cscore")
    implementation wpilibTools.deps.wpilibJava("wpinet")
    implementation wpilibTools.deps.wpilibJava("wpimath")
    implementation wpilibTools.deps.wpilibJava("ntcore")
    implementation wpilibTools.deps.wpilibJava("hal")
    implementation wpilibTools.deps.wpilibJava("wpilibj")
    implementation wpilibTools.deps.wpilibJava("apriltag")
    implementation wpilibTools.deps.wpilibOpenCvJava("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get())

    implementation group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: wpi.versions.jacksonVersion.get()
    implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: wpi.versions.jacksonVersion.get()
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: wpi.versions.jacksonVersion.get()

    implementation group: "org.ejml", name: "ejml-simple", version: wpi.versions.ejmlVersion.get()
    implementation group: "us.hebi.quickbuf", name: "quickbuf-runtime", version: wpi.versions.quickbufVersion.get();
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.12'
    }
    plugins {
        quickbuf {
            artifact = 'us.hebi.quickbuf:protoc-gen-quickbuf:1.3.2'
        }
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.builtins {
                cpp {}
                remove java
            }
            task.plugins {
                quickbuf {
                    option "gen_descriptors=true"
                }
            }
        }
    }
}

model {
    components {
        all {
            it.sources.each {
                it.source {
                    srcDirs 'src/main/native/cpp'
                    srcDirs 'build/generated/source/proto/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }

                it.exportedHeaders {
                    srcDirs 'src/main/native/include'
                    srcDirs 'build/generated/source/proto/main/cpp'
                    include "**/*.h"
                }
            }
            it.binaries.all {
                if (it instanceof SharedLibraryBinarySpec) {
                    it.buildable = false
                    return
                }
                it.tasks.withType(CppCompile) {
                    it.dependsOn generateProto
                }
            }
        }
    }
    binaries {
        withType(GoogleTestTestSuiteBinarySpec) {
            it.tasks.withType(CppCompile) {
                it.dependsOn generateProto
            }
        }
    }
}
